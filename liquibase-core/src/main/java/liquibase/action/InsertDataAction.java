package liquibase.action;

import java.util.List;

import liquibase.change.ChangeMetaData;
import liquibase.change.ChangeStatus;
import liquibase.change.ChangeWithColumns;
import liquibase.change.ColumnConfig;
import liquibase.change.DatabaseChange;
import liquibase.change.DbmsTargetedChange;
import liquibase.change.ExecutableChange;
import liquibase.change.core.InsertDataChange;
import liquibase.database.Database;
import liquibase.database.core.InformixDatabase;
import liquibase.exception.ValidationErrors;
import liquibase.statement.InsertExecutablePreparedStatement;
import liquibase.statement.SqlStatement;
import liquibase.statement.core.InsertStatement;

import org.kohsuke.MetaInfServices;

/**
 * Inserts data into an existing table.
 */
@DatabaseChange(name = "insert", description = "Inserts data into an existing table", priority = ChangeMetaData.PRIORITY_DEFAULT, appliesTo = "table")
@MetaInfServices(ExecutableChange.class)
public class InsertDataAction extends AbstractAction<InsertDataChange> implements
    ChangeWithColumns<ColumnConfig>, DbmsTargetedChange {

    public InsertDataAction() {
        super(new InsertDataChange());
    }

    public InsertDataAction(InsertDataChange change) {
        super(change);
    }

    @Override
    public ValidationErrors validate(Database database) {
        ValidationErrors validate = super.validate(database);
        validate.checkRequiredField("columns", getColumns());
        return validate;
    }

    public String getCatalogName() {
        return change.getCatalogName();
    }

    public void setCatalogName(String catalogName) {
        change.setCatalogName(catalogName);
    }

    public String getSchemaName() {
        return change.getSchemaName();
    }

    public void setSchemaName(String schemaName) {
        change.setSchemaName(schemaName);
    }

    public String getTableName() {
        return change.getTableName();
    }

    public void setTableName(String tableName) {
        change.setTableName(tableName);
    }

    @Override
    public List<ColumnConfig> getColumns() {
        return change.getColumns();
    }

    @Override
    public void setColumns(List<ColumnConfig> columns) {
        change.setColumns(columns);
    }

    @Override
    public void addColumn(ColumnConfig column) {
        change.addColumn(column);
    }

    public void removeColumn(ColumnConfig column) {
        change.removeColumn(column);
    }

    @Override
    public SqlStatement[] generateStatements(Database database) {

        boolean needsPreparedStatement = false;
        for (ColumnConfig column : getColumns()) {
            if (column.getValueBlobFile() != null) {
                needsPreparedStatement = true;
            }
            if (column.getValueClobFile() != null) {
                needsPreparedStatement = true;
            }
            // TODO: This could be changed to check the column data types to see if we need the
            // prepared statement
            if (/* column.getValueText() != null && */database instanceof InformixDatabase) {
                needsPreparedStatement = true;
            }
        }

        if (needsPreparedStatement) {
            return new SqlStatement[] { new InsertExecutablePreparedStatement(database,
                getCatalogName(), getSchemaName(), getTableName(), getColumns(), getChangeSet(),
                change.getResourceAccessor()) };
        }

        InsertStatement statement = new InsertStatement(getCatalogName(), getSchemaName(),
            getTableName());

        for (ColumnConfig column : getColumns()) {

            if (database.supportsAutoIncrement() && column.isAutoIncrement() != null
                && column.isAutoIncrement()) {
                // skip auto increment columns as they will be generated by the database
                continue;
            }

            statement.addColumnValue(column.getName(), column.getValueObject());
        }
        return new SqlStatement[] { statement };
    }

    @Override
    public ChangeStatus checkStatus(Database database) {
        return new ChangeStatus().unknown("Cannot check insertData status");
    }

    /**
     * @see liquibase.change.ExecutableChange#getConfirmationMessage()
     */
    @Override
    public String getConfirmationMessage() {
        return "New row inserted into " + getTableName();
    }

    @Override
    public String getDbms() {
        return change.getDbms();
    }

    @Override
    public void setDbms(final String dbms) {
        change.setDbms(dbms);
    }
}
